import React, { useEffect, useState } from 'react';
import { Modal } from 'antd';
import DOMPurify from 'dompurify';

import './Recipe.css';
import Button from '../Button/Button';
import heart from '../../images/icon__heart.svg';
import heartLiked from '../../images/icon__heart_liked.svg';
import question from '../../images/question-help.svg';
import dice from '../../images/dice_icon.svg';
import AddToCart from '../../images/cart.svg';
import { Link } from 'react-router-dom';

const Recipe = ({ recipe, likedRecipes, getRandomRecipe, onLikeRecipe }) => {
  const [rotateDice, setRotateDice] = useState(false);
  const [scaleHeart, setScaleHeart] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);

  const isLiked = likedRecipes.some((r) => r._id === recipe._id);
  const cleanInstructions = DOMPurify.sanitize(recipe.instructions);

  const showInfo = () => {
    Modal.info({
      title: '–ü–æ–º–æ—â—å',
      content: (
        <div style={{ fontFamily: 'Cruinn' }}>
          <p>
            –î–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Å–ª—É–∂–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏: –ß—Ç–æ –∂–µ
            –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É–∂–∏–Ω? üò±
          </p>
          <p>
            –í –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤. –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫
            –∏—Å—Ç–æ—á–Ω–∏–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"
          </p>
          <p>–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫—É–±–∏–∫ üé≤</p>
          <p>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ä–µ—Ü–µ–ø—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–µ—Ä–¥–µ—á–∫–æ üß°</p>
          <p>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</p>
        </div>
      ),
      onOk() {},
    });
  };

  // –ü–æ—á–µ–º—É-—Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ø–∞–¥–∞–µ—à—å –≤ –∫–æ–Ω–µ—Ü,
  // –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–Ω—É–¥–∏–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –Ω–∞–≤–µ—Ä—Ö
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const animateButton = (btn) => {
    if (btn === 'heart') {
      setScaleHeart(true);
    } else if (btn === 'dice') {
      setRotateDice(true);
    }

    setTimeout(() => {
      setScaleHeart(false);
      setRotateDice(false);
    }, 600);
  };
  
  return (
    <section className="recipe">
      {recipe.length > 1 ? (
        <>
          <div className="recipe__buttons-container">
            <Button
              btnClass={`recipe__heart-btn ${isLiked && scaleHeart ? 'scale' : ''}`}
              btnText={
                <img
                  className="recipe__icon-heart"
                  src={isLiked ? heartLiked : heart}
                  alt="heart icon"
                  onClick={() => {
                    animateButton('heart');
                    onLikeRecipe(recipe, isLiked);
                  }}
                />
              }
            />

            <Button
              btnClass="recipe__question"
              btnText={<img className="recipe__icon-question" src={question} alt="question icon" />}
              onClick={showInfo}
            />

            <Button
              btnClass={`recipe__dice-btn ${rotateDice ? 'rotate' : ''}`}
              btnText={<img className="recipe__icon-dice" src={dice} alt="dice icon" />}
              onClick={() => {
                animateButton('dice');
                getRandomRecipe();
              }}
            />
          </div>
          <img
            className="recipe__image"
            loading="lazy"
            src={recipe.imageUrl}
            alt={recipe.mealName}
          />
          <div className="recipe__info recipe__box-shabow">
            <h1 className="recipe__meal-name">{recipe.mealName}</h1>

            <div className="recipe__buttons-container recipe__buttons-container_flex-column">
              {showInstructions ? (
                <Button
                  btnClass={'recipe__button'}
                  btnText={'–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'}
                  onClick={() => setShowInstructions((prev) => !prev)}
                />
              ) : (
                <Button
                  btnClass={'recipe__button'}
                  btnText={'–ö–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å'}
                  onClick={() => setShowInstructions((prev) => !prev)}
                />
              )}

              {recipe.youtubeUrl && (
                <a
                  className="recipe__button recipe__button-yt"
                  href={recipe.youtubeUrl}
                  target="_blank"
                  rel="noreferrer">
                  –í–∏–¥–µ–æ
                </a>
              )}
              <div className="recipe__buttons-container recipe__buttons-container_flex-column">
                <p className="recipe__author">{recipe.mealAuthor || 'No Author'}</p>
                <a
                  className="recipe__author-link"
                  href={recipe.mealSourceUrl}
                  target="_blank"
                  rel="noreferrer">
                  –ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç &#10132;
                </a>
              </div>
            </div>
          </div>

          {showInstructions ? (
            <p
              className="recipe__instructions recipe__box-shabow"
              dangerouslySetInnerHTML={{ __html: cleanInstructions }}
            />
          ) : (
            <ul className="recipe__ingredients">
              {recipe.ingredients?.map((item, index) => (
                <li className="recipe__ingreditent-container recipe__box-shabow" key={index}>
                  <div className="recipe__ingreditent">
                    <p className="recipe__ingreditent-name">{item.ingredient}</p>
                    <p className="recipe__ingreditent-measure">{item.measure}</p>
                  </div>

                  {/* <Button
                  btnClass="button_type-addtocart"
                  btnText={
                    <img
                      className="recipe__icon-addtocart"
                      src={AddToCart}
                      alt="add to cart icon"
                    />
                  }
                /> */}
                </li>
              ))}
            </ul>
          )}
        </>
      ) : (
        <div>
          <p className="recipe__not-found">
            –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã... –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–µ–±–µ –ª—é–±–∏–º—ã—Ö
            –∫—Ä—ã–ª–µ—à–µ–∫ üçó
          </p>
          <Link className=" link-null button_type_back" to="/">
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>
      )}
    </section>
  );
};

export default Recipe;
